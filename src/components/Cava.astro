---
interface Props {
    waveCount: number;
    speed: number;
    barCount: number;
    gap: number;
}

const { waveCount = 2, speed = 0.01, barCount = 30, gap = 10 } = Astro.props;
---

<canvas
    data-wavecount={waveCount}
    data-speed={speed}
    data-barcount={barCount}
    data-gap={gap}></canvas>
<script>
    const canvas = document.querySelector("canvas")!!;
    const ctx = canvas?.getContext("2d")!!;
    const style = window.getComputedStyle(document.body);
    const barColor = style.getPropertyValue("--foreground1");

    const waveCount = parseFloat(canvas.getAttribute("data-wavecount")!!);
    const speed = parseFloat(canvas.getAttribute("data-speed")!!);
    const barCount = parseFloat(canvas.getAttribute("data-barcount")!!);
    const gap = parseFloat(canvas.getAttribute("data-gap")!!);
    const precision = (waveCount * 2 * Math.PI) / barCount;

    let offset = 0;
    function animate() {
        requestAnimationFrame(animate);
        ctx.canvas.width = window.innerWidth;
        ctx.canvas.height = window.innerHeight;
        ctx.transform(1, 0, 0, -1, 0, canvas.height);
        ctx.fillStyle = barColor;
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        const width = (canvas.width - gap * (barCount - 1)) / barCount;
        for (let i = 0; i < barCount; i++) {
            const heightPercent = 45 * Math.sin(precision * i - offset) + 55;
            const height = (heightPercent * canvas.height) / 100;
            ctx.fillRect((width + gap) * i, 0, width, height);
        }
        offset += speed;
    }
    animate();
</script>
<style>
    canvas {
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 20%;
        opacity: 20%;
    }
</style>
