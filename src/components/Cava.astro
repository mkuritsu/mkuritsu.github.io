---
// TODO: should probably check how to use canvas api to speed this up
interface Props {
    waveCount: number;
    speed: number;
    barCount: number;
}

const { waveCount = 2, speed = Math.PI / 20, barCount = 30 } = Astro.props;
---

<div class="body-container" data-wavecount={waveCount} data-wavespeed={speed}>
    <div class="bar-container">
        {
            Array.from({ length: barCount }).map(() => {
                return <div class="progress-bar" />;
            })
        }
    </div>
</div>
<script>
    const container = document.querySelector(".body-container");
    const waveCount = parseFloat(container?.getAttribute("data-wavecount")!!);
    const waveSpeed = parseFloat(container?.getAttribute("data-wavespeed")!!);
    const progressBars = document.querySelectorAll(".progress-bar");
    const precision = (waveCount * 2 * Math.PI) / progressBars.length;
    let offset = 0;

    setInterval(() => {
        for (let i = 0; i < progressBars.length; i++) {
            const bar = progressBars[i];
            const height = 45 * Math.sin(precision * i - offset) + 55;
            bar.setAttribute("style", `height: ${height}%`);
        }
        offset += waveSpeed;
    }, 100);
</script>
<style>
    .body-container {
        display: flex;
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        justify-content: center;
        align-items: end;
        pointer-events: none;
        z-index: -999;
    }

    .bar-container {
        width: 100%;
        height: 20%;
        display: flex;
        align-items: end;
        justify-content: center;
        opacity: 20%;
        overflow: hidden;
        gap: 1ch;
        pointer-events: none;
    }

    .progress-bar {
        background-color: var(--foreground1);
        width: 10ch;
        height: 10ch;
        transition: height 0.1s linear;
        pointer-events: none;
    }
</style>
